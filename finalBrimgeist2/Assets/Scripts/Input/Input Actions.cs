//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""2ca13bf3-d618-42dd-b87f-dfb419618569"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2a8a0422-22ad-4154-a005-2a49ea9e76fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""80e5b106-30ba-46d0-8b36-0640dfd257ac"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""16b47e2a-55ab-4517-96c0-470b7661a2e0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d4fbe1db-7c8b-45e9-be3c-ca93fe46c186"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9764eadc-d616-479c-b427-eb3c1399cdce"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b075bafa-23e4-4900-9e3d-fc02896bbc79"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Extras"",
            ""id"": ""50ee05f5-7df5-4330-9160-191a60c979bf"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""f50b30ed-d5c8-49ca-ab1a-3539dc806c17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CharacterPanel"",
                    ""type"": ""Button"",
                    ""id"": ""862bf1b5-4010-4fc2-b2c9-bc9673ba00e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InventoryPanel"",
                    ""type"": ""Button"",
                    ""id"": ""501fbacd-52b0-4888-a2cf-d19592683691"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3147f24-e9aa-4c53-a27a-8b95ea59ba18"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""128b1cd2-ce57-4795-b308-79f9b53cbaff"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CharacterPanel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55843c3c-de0e-40ce-a53e-473770d65da2"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryPanel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Spells"",
            ""id"": ""56a96139-dbf0-4a88-971d-8f26d583d8c8"",
            ""actions"": [
                {
                    ""name"": ""CastSpell"",
                    ""type"": ""Button"",
                    ""id"": ""67ae984b-8601-4cd4-8ee0-247b7f7e40ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BindSpell"",
                    ""type"": ""Button"",
                    ""id"": ""05b41551-8833-4591-ab8a-c3303275720c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ba9ea412-1176-440d-894f-1f510b44e62a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CastSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7355d0ae-9ba9-45f3-82a7-2309e9df21c1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BindSpell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        // Extras
        m_Extras = asset.FindActionMap("Extras", throwIfNotFound: true);
        m_Extras_Pause = m_Extras.FindAction("Pause", throwIfNotFound: true);
        m_Extras_CharacterPanel = m_Extras.FindAction("CharacterPanel", throwIfNotFound: true);
        m_Extras_InventoryPanel = m_Extras.FindAction("InventoryPanel", throwIfNotFound: true);
        // Spells
        m_Spells = asset.FindActionMap("Spells", throwIfNotFound: true);
        m_Spells_CastSpell = m_Spells.FindAction("CastSpell", throwIfNotFound: true);
        m_Spells_BindSpell = m_Spells.FindAction("BindSpell", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Move;
    public struct MovementActions
    {
        private @InputActions m_Wrapper;
        public MovementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Extras
    private readonly InputActionMap m_Extras;
    private IExtrasActions m_ExtrasActionsCallbackInterface;
    private readonly InputAction m_Extras_Pause;
    private readonly InputAction m_Extras_CharacterPanel;
    private readonly InputAction m_Extras_InventoryPanel;
    public struct ExtrasActions
    {
        private @InputActions m_Wrapper;
        public ExtrasActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Extras_Pause;
        public InputAction @CharacterPanel => m_Wrapper.m_Extras_CharacterPanel;
        public InputAction @InventoryPanel => m_Wrapper.m_Extras_InventoryPanel;
        public InputActionMap Get() { return m_Wrapper.m_Extras; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExtrasActions set) { return set.Get(); }
        public void SetCallbacks(IExtrasActions instance)
        {
            if (m_Wrapper.m_ExtrasActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_ExtrasActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_ExtrasActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_ExtrasActionsCallbackInterface.OnPause;
                @CharacterPanel.started -= m_Wrapper.m_ExtrasActionsCallbackInterface.OnCharacterPanel;
                @CharacterPanel.performed -= m_Wrapper.m_ExtrasActionsCallbackInterface.OnCharacterPanel;
                @CharacterPanel.canceled -= m_Wrapper.m_ExtrasActionsCallbackInterface.OnCharacterPanel;
                @InventoryPanel.started -= m_Wrapper.m_ExtrasActionsCallbackInterface.OnInventoryPanel;
                @InventoryPanel.performed -= m_Wrapper.m_ExtrasActionsCallbackInterface.OnInventoryPanel;
                @InventoryPanel.canceled -= m_Wrapper.m_ExtrasActionsCallbackInterface.OnInventoryPanel;
            }
            m_Wrapper.m_ExtrasActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @CharacterPanel.started += instance.OnCharacterPanel;
                @CharacterPanel.performed += instance.OnCharacterPanel;
                @CharacterPanel.canceled += instance.OnCharacterPanel;
                @InventoryPanel.started += instance.OnInventoryPanel;
                @InventoryPanel.performed += instance.OnInventoryPanel;
                @InventoryPanel.canceled += instance.OnInventoryPanel;
            }
        }
    }
    public ExtrasActions @Extras => new ExtrasActions(this);

    // Spells
    private readonly InputActionMap m_Spells;
    private ISpellsActions m_SpellsActionsCallbackInterface;
    private readonly InputAction m_Spells_CastSpell;
    private readonly InputAction m_Spells_BindSpell;
    public struct SpellsActions
    {
        private @InputActions m_Wrapper;
        public SpellsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CastSpell => m_Wrapper.m_Spells_CastSpell;
        public InputAction @BindSpell => m_Wrapper.m_Spells_BindSpell;
        public InputActionMap Get() { return m_Wrapper.m_Spells; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpellsActions set) { return set.Get(); }
        public void SetCallbacks(ISpellsActions instance)
        {
            if (m_Wrapper.m_SpellsActionsCallbackInterface != null)
            {
                @CastSpell.started -= m_Wrapper.m_SpellsActionsCallbackInterface.OnCastSpell;
                @CastSpell.performed -= m_Wrapper.m_SpellsActionsCallbackInterface.OnCastSpell;
                @CastSpell.canceled -= m_Wrapper.m_SpellsActionsCallbackInterface.OnCastSpell;
                @BindSpell.started -= m_Wrapper.m_SpellsActionsCallbackInterface.OnBindSpell;
                @BindSpell.performed -= m_Wrapper.m_SpellsActionsCallbackInterface.OnBindSpell;
                @BindSpell.canceled -= m_Wrapper.m_SpellsActionsCallbackInterface.OnBindSpell;
            }
            m_Wrapper.m_SpellsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CastSpell.started += instance.OnCastSpell;
                @CastSpell.performed += instance.OnCastSpell;
                @CastSpell.canceled += instance.OnCastSpell;
                @BindSpell.started += instance.OnBindSpell;
                @BindSpell.performed += instance.OnBindSpell;
                @BindSpell.canceled += instance.OnBindSpell;
            }
        }
    }
    public SpellsActions @Spells => new SpellsActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IExtrasActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnCharacterPanel(InputAction.CallbackContext context);
        void OnInventoryPanel(InputAction.CallbackContext context);
    }
    public interface ISpellsActions
    {
        void OnCastSpell(InputAction.CallbackContext context);
        void OnBindSpell(InputAction.CallbackContext context);
    }
}
